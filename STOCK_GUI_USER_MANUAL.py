#!/usr/bin/env python3
"""
STOCK PREDICTION GUI - COMPREHENSIVE USER MANUAL
===============================================

This file serves as a comprehensive user manual for the Stock Prediction GUI.
It contains all specifications, defaults, and detailed usage instructions.

Author: AI Assistant
Version: 1.0
Date: 2025-01-27
"""

import os
import sys
from datetime import datetime

class StockGUIUserManual:
    """
    Comprehensive user manual for the Stock Prediction GUI.
    This class contains all documentation, specifications, and usage instructions.
    """
    
    def __init__(self):
        self.version = "1.0"
        self.last_updated = "2025-01-27"
        
    def print_header(self):
        """Print the manual header."""
        print("=" * 80)
        print("STOCK PREDICTION GUI - COMPREHENSIVE USER MANUAL")
        print("=" * 80)
        print(f"Version: {self.version}")
        print(f"Last Updated: {self.last_updated}")
        print("=" * 80)
        print()
    
    def print_overview(self):
        """Print the overview section."""
        print("OVERVIEW")
        print("-" * 40)
        print("The Stock Prediction GUI is a comprehensive neural network application")
        print("for stock price prediction with advanced visualization capabilities.")
        print()
        print("Key Features:")
        print("• Neural network training with real-time visualization")
        print("• 3D gradient descent visualization")
        print("• Live training plots with Plotly integration")
        print("• Comprehensive model management")
        print("• Advanced plot controls and animation")
        print("• Prediction capabilities with multiple data sources")
        print()
    
    def print_installation(self):
        """Print installation instructions."""
        print("INSTALLATION")
        print("-" * 40)
        print("1. Ensure Python 3.8+ is installed")
        print("2. Install required dependencies:")
        print("   pip install tkinter matplotlib numpy pandas scikit-learn plotly")
        print("3. Navigate to the simple directory:")
        print("   cd /path/to/neural_net/simple")
        print("4. Run the GUI:")
        print("   python gui/main_gui.py")
        print()
    
    def print_interface_overview(self):
        """Print interface overview."""
        print("INTERFACE OVERVIEW")
        print("-" * 40)
        print("The GUI consists of two main panels:")
        print()
        print("1. CONTROL PANEL (Left Side)")
        print("   • Model Management Tab")
        print("   • Training Configuration Tab") 
        print("   • Prediction Configuration Tab")
        print("   • Plot Controls Tab")
        print()
        print("2. DISPLAY PANEL (Right Side)")
        print("   • Training Results Tab")
        print("   • Prediction Results Tab")
        print("   • Gradient Descent Tab")
        print("   • 3D Gradient Descent Tab")
        print("   • Saved Plots Tab")
        print("   • Live Training Plot Tab")
        print()
    
    def print_model_management(self):
        """Print model management specifications."""
        print("MODEL MANAGEMENT TAB")
        print("-" * 40)
        print("Location: Control Panel → Model Management")
        print()
        print("Features:")
        print("• Model Selection Dropdown")
        print("• Model Information Display")
        print("• Load Saved Plots Button")
        print("• Cache Management")
        print()
        print("Model Directory Structure:")
        print("model_YYYYMMDD_HHMMSS/")
        print("├── model.h5                    # Trained neural network")
        print("├── training_history.json       # Training metrics")
        print("├── scaler_params.npz          # Data standardization parameters")
        print("├── plots/                     # Generated visualizations")
        print("│   ├── loss_curve.png")
        print("│   ├── actual_vs_predicted.png")
        print("│   ├── gradient_descent_3d_frame_*.png")
        print("│   └── ...")
        print("└── predictions_*.csv          # Prediction results")
        print()
    
    def print_training_configuration(self):
        """Print training configuration specifications."""
        print("TRAINING CONFIGURATION TAB")
        print("-" * 40)
        print("Location: Control Panel → Training Configuration")
        print()
        print("Data Configuration:")
        print("• Data File Selection: CSV files with stock data")
        print("• Feature Selection: open, high, low, close, volume")
        print("• Target Feature: close (default)")
        print("• Train/Test Split: 80/20 (default)")
        print()
        print("Model Configuration:")
        print("• Hidden Layer Size: 4-128 neurons (default: 32)")
        print("• Learning Rate: 0.001-0.1 (default: 0.01)")
        print("• Epochs: 1-10000 (default: 100)")
        print("• Batch Size: 1-512 (default: 32)")
        print("• Optimizer: Adam (default)")
        print("• Loss Function: Mean Squared Error")
        print("• Activation: ReLU (hidden), Linear (output)")
        print()
        print("Advanced Options:")
        print("• Early Stopping: Enabled (patience: 10)")
        print("• Validation Split: 20%")
        print("• Data Standardization: Enabled")
        print("• Technical Indicators: Optional")
        print()
    
    def print_prediction_configuration(self):
        """Print prediction configuration specifications."""
        print("PREDICTION CONFIGURATION TAB")
        print("-" * 40)
        print("Location: Control Panel → Prediction Configuration")
        print()
        print("Prediction Settings:")
        print("• Input Data File: CSV with stock data")
        print("• Model Selection: Dropdown of trained models")
        print("• Feature Mapping: Automatic based on training")
        print("• Output Directory: Model directory (default)")
        print()
        print("Output Options:")
        print("• Predictions CSV: predictions_YYYYMMDD_HHMMSS.csv")
        print("• Visualization Plot: actual_vs_predicted_YYYYMMDD_HHMMSS.png")
        print("• 3D Visualization: gradient_descent_3d_frame_*.png")
        print()
    
    def print_plot_controls(self):
        """Print plot controls specifications."""
        print("PLOT CONTROLS TAB")
        print("-" * 40)
        print("Location: Control Panel → Plot Controls")
        print()
        print("3D Visualization Parameters:")
        print("• View Preset: Default, Top View, Side View, Isometric")
        print("• Rotation X: -180° to 180° (default: 0°)")
        print("• Rotation Y: -180° to 180° (default: 0°)")
        print("• Rotation Z: -180° to 180° (default: 0°)")
        print("• Zoom Level: 0.1x to 5.0x (default: 1.0x)")
        print("• Camera X: -10 to 10 (default: 0)")
        print("• Camera Y: -10 to 10 (default: 0)")
        print("• Camera Z: 1 to 20 (default: 5)")
        print()
        print("Animation Controls:")
        print("• Animation Speed: 0.1x to 5.0x (default: 1.0x)")
        print("• Frame Rate: 1 to 60 FPS (default: 30 FPS)")
        print("• Loop Mode: Loop, Once, Ping-Pong (default: Loop)")
        print("• Playback Direction: Forward, Reverse (default: Forward)")
        print("• Auto-play: Enabled/Disabled (default: Disabled)")
        print("• Animation Progress: 0% to 100% (default: 0%)")
        print()
        print("Animation Buttons:")
        print("• Play: Start/resume animation")
        print("• Pause: Pause animation")
        print("• Stop: Stop and reset animation")
        print("• Reset: Reset to beginning")
        print()
    
    def print_display_panel(self):
        """Print display panel specifications."""
        print("DISPLAY PANEL")
        print("-" * 40)
        print("Location: Right side of the GUI")
        print()
        print("Training Results Tab:")
        print("• Real-time training progress")
        print("• Loss curve visualization")
        print("• Training metrics display")
        print("• Matplotlib toolbar integration")
        print()
        print("Prediction Results Tab:")
        print("• Prediction vs actual values plot")
        print("• Error distribution analysis")
        print("• Performance metrics")
        print("• Interactive plot controls")
        print()
        print("Gradient Descent Tab:")
        print("• 2D gradient descent visualization")
        print("• Loss surface contour plot")
        print("• Optimization path tracking")
        print("• Interactive zoom and pan")
        print()
        print("3D Gradient Descent Tab:")
        print("• 3D loss surface visualization")
        print("• Interactive 3D controls")
        print("• Animation playback")
        print("• Frame-by-frame navigation")
        print()
        print("Saved Plots Tab:")
        print("• Gallery of all generated plots")
        print("• Thumbnail navigation")
        print("• Full-size image viewing")
        print("• Plot metadata display")
        print()
        print("Live Training Plot Tab:")
        print("• Real-time Plotly visualization")
        print("• Interactive 3D plots")
        print("• Live data streaming")
        print("• Performance monitoring")
        print()
    
    def print_data_formats(self):
        """Print data format specifications."""
        print("DATA FORMATS")
        print("-" * 40)
        print()
        print("Input CSV Format:")
        print("Required columns: date, open, high, low, close, volume")
        print("Optional columns: additional technical indicators")
        print()
        print("Example CSV structure:")
        print("date,open,high,low,close,volume")
        print("2025-01-01,100.50,102.30,99.80,101.20,1500000")
        print("2025-01-02,101.20,103.10,100.90,102.50,1600000")
        print("...")
        print()
        print("Supported Data Sources:")
        print("• Yahoo Finance CSV exports")
        print("• Alpha Vantage API data")
        print("• Custom stock data files")
        print("• Real-time data feeds")
        print()
    
    def print_technical_indicators(self):
        """Print technical indicators specifications."""
        print("TECHNICAL INDICATORS")
        print("-" * 40)
        print()
        print("Available Indicators:")
        print("• Moving Averages (SMA, EMA)")
        print("• Relative Strength Index (RSI)")
        print("• Bollinger Bands")
        print("• MACD (Moving Average Convergence Divergence)")
        print("• Stochastic Oscillator")
        print("• Average True Range (ATR)")
        print("• Williams %R")
        print("• Commodity Channel Index (CCI)")
        print()
        print("Usage:")
        print("• Automatically calculated during training")
        print("• Added as additional features")
        print("• Configurable parameters")
        print("• Optional inclusion")
        print()
    
    def print_performance_metrics(self):
        """Print performance metrics specifications."""
        print("PERFORMANCE METRICS")
        print("-" * 40)
        print()
        print("Training Metrics:")
        print("• Loss (MSE): Mean Squared Error")
        print("• Validation Loss: Out-of-sample error")
        print("• Training Time: Total training duration")
        print("• Convergence: Epochs to convergence")
        print()
        print("Prediction Metrics:")
        print("• R² Score: Coefficient of determination")
        print("• MAE: Mean Absolute Error")
        print("• RMSE: Root Mean Squared Error")
        print("• MAPE: Mean Absolute Percentage Error")
        print("• Directional Accuracy: % correct direction")
        print()
    
    def print_troubleshooting(self):
        """Print troubleshooting guide."""
        print("TROUBLESHOOTING")
        print("-" * 40)
        print()
        print("Common Issues:")
        print()
        print("1. GUI Not Starting:")
        print("   • Check Python version (3.8+)")
        print("   • Verify all dependencies installed")
        print("   • Check file permissions")
        print("   • Ensure working directory is correct")
        print()
        print("2. Training Issues:")
        print("   • Verify data format is correct")
        print("   • Check for missing values")
        print("   • Ensure sufficient data (minimum 100 samples)")
        print("   • Try different learning rates")
        print("   • Reduce model complexity if overfitting")
        print()
        print("3. Visualization Issues:")
        print("   • Update matplotlib to latest version")
        print("   • Check display settings")
        print("   • Restart GUI if plots freeze")
        print("   • Clear plot cache if needed")
        print()
        print("4. Memory Issues:")
        print("   • Reduce batch size")
        print("   • Use smaller datasets")
        print("   • Clear model cache")
        print("   • Restart application")
        print()
    
    def print_keyboard_shortcuts(self):
        """Print keyboard shortcuts."""
        print("KEYBOARD SHORTCUTS")
        print("-" * 40)
        print()
        print("General:")
        print("• Ctrl+Q: Quit application")
        print("• Ctrl+S: Save current model")
        print("• Ctrl+O: Open data file")
        print("• Ctrl+R: Refresh plots")
        print("• Ctrl+C: Clear cache")
        print()
        print("Plot Controls:")
        print("• Space: Play/pause animation")
        print("• R: Reset view")
        print("• Z: Zoom in")
        print("• X: Zoom out")
        print("• Arrow Keys: Rotate 3D view")
        print()
        print("Navigation:")
        print("• Tab: Next control")
        print("• Shift+Tab: Previous control")
        print("• Enter: Activate button")
        print("• Escape: Cancel operation")
        print()
    
    def print_advanced_features(self):
        """Print advanced features documentation."""
        print("ADVANCED FEATURES")
        print("-" * 40)
        print()
        print("1. Live Training Visualization:")
        print("   • Real-time loss curve updates")
        print("   • Interactive Plotly 3D plots")
        print("   • Performance monitoring")
        print("   • Training progress tracking")
        print()
        print("2. Model Comparison:")
        print("   • Side-by-side model evaluation")
        print("   • Performance benchmarking")
        print("   • A/B testing capabilities")
        print("   • Ensemble methods support")
        print()
        print("3. Custom Optimizers:")
        print("   • Adam optimizer (default)")
        print("   • SGD with momentum")
        print("   • RMSprop")
        print("   • Custom optimizer support")
        print()
        print("4. Data Preprocessing:")
        print("   • Automatic data cleaning")
        print("   • Feature scaling and normalization")
        print("   • Outlier detection and removal")
        print("   • Missing value handling")
        print()
        print("5. Export Capabilities:")
        print("   • Model export (HDF5 format)")
        print("   • Prediction results (CSV)")
        print("   • Visualization exports (PNG, PDF)")
        print("   • Training history (JSON)")
        print()
    
    def print_configuration_files(self):
        """Print configuration file specifications."""
        print("CONFIGURATION FILES")
        print("-" * 40)
        print()
        print("GUI Configuration:")
        print("• config.json: Application settings")
        print("• cache/ : Image and data cache")
        print("• logs/ : Application logs")
        print("• models/ : Saved model directory")
        print()
        print("Model Files:")
        print("• model.h5: Trained neural network")
        print("• training_history.json: Training metrics")
        print("• scaler_params.npz: Data preprocessing parameters")
        print("• model_config.json: Model architecture")
        print()
        print("Cache Management:")
        print("• Automatic cache cleanup")
        print("• Manual cache clearing")
        print("• Cache size limits")
        print("• Cache expiration policies")
        print()
    
    def print_usage_examples(self):
        """Print usage examples."""
        print("USAGE EXAMPLES")
        print("-" * 40)
        print()
        print("Example 1: Basic Training")
        print("1. Launch GUI: python stock_gui.py")
        print("2. Select data file in Training Configuration")
        print("3. Choose features: open, high, low, volume")
        print("4. Set target: close")
        print("5. Configure model: 32 hidden neurons, 100 epochs")
        print("6. Click 'Start Training'")
        print("7. Monitor progress in Training Results tab")
        print("8. View results in Saved Plots tab")
        print()
        print("Example 2: Making Predictions")
        print("1. Select trained model in Model Management")
        print("2. Go to Prediction Configuration tab")
        print("3. Choose input data file")
        print("4. Click 'Run Prediction'")
        print("5. View results in Prediction Results tab")
        print("6. Generate 3D visualization")
        print()
        print("Example 3: 3D Visualization")
        print("1. Select model with 3D data")
        print("2. Go to 3D Gradient Descent tab")
        print("3. Use Plot Controls to adjust view")
        print("4. Start animation with Play button")
        print("5. Adjust animation speed and direction")
        print("6. Use mouse to rotate and zoom")
        print()
        print("Example 4: Live Training")
        print("1. Configure training parameters")
        print("2. Open Live Training Plot tab")
        print("3. Click 'Start Simulated Training'")
        print("4. Watch real-time 3D visualization")
        print("5. Monitor loss convergence")
        print("6. Stop when satisfied with results")
        print()
    
    def print_limitations(self):
        """Print known limitations."""
        print("KNOWN LIMITATIONS")
        print("-" * 40)
        print()
        print("Performance:")
        print("• Large datasets may slow down GUI")
        print("• 3D visualizations require significant memory")
        print("• Real-time updates may lag on slower systems")
        print()
        print("Data:")
        print("• CSV format required for input")
        print("• Minimum 100 data points recommended")
        print("• Missing values must be handled")
        print("• Date format must be consistent")
        print()
        print("Model:")
        print("• Single hidden layer architecture")
        print("• Limited to regression tasks")
        print("• No automatic hyperparameter tuning")
        print("• Fixed activation functions")
        print()
        print("Visualization:")
        print("• 3D plots may not work on all systems")
        print("• Animation performance varies by hardware")
        print("• Plot export limited to PNG format")
        print("• Limited customization options")
        print()
    
    def print_future_enhancements(self):
        """Print planned future enhancements."""
        print("FUTURE ENHANCEMENTS")
        print("-" * 40)
        print()
        print("Planned Features:")
        print("• Multi-layer neural networks")
        print("• Classification support")
        print("• Automatic hyperparameter optimization")
        print("• More technical indicators")
        print("• Real-time data feeds")
        print("• Model ensemble methods")
        print("• Advanced visualization options")
        print("• Export to multiple formats")
        print("• Cloud model storage")
        print("• API integration")
        print()
    
    def print_contact_info(self):
        """Print contact information."""
        print("CONTACT INFORMATION")
        print("-" * 40)
        print()
        print("For support and questions:")
        print("• Check the troubleshooting section")
        print("• Review the usage examples")
        print("• Consult the documentation")
        print("• Report bugs with detailed information")
        print()
    
    def print_full_manual(self):
        """Print the complete user manual."""
        self.print_header()
        self.print_overview()
        self.print_installation()
        self.print_interface_overview()
        self.print_model_management()
        self.print_training_configuration()
        self.print_prediction_configuration()
        self.print_plot_controls()
        self.print_display_panel()
        self.print_data_formats()
        self.print_technical_indicators()
        self.print_performance_metrics()
        self.print_troubleshooting()
        self.print_keyboard_shortcuts()
        self.print_advanced_features()
        self.print_configuration_files()
        self.print_usage_examples()
        self.print_limitations()
        self.print_future_enhancements()
        self.print_contact_info()
        
        print("=" * 80)
        print("END OF USER MANUAL")
        print("=" * 80)

def main():
    """Main function to display the user manual."""
    manual = StockGUIUserManual()
    
    if len(sys.argv) > 1:
        section = sys.argv[1].lower()
        
        if section == "overview":
            manual.print_header()
            manual.print_overview()
        elif section == "installation":
            manual.print_header()
            manual.print_installation()
        elif section == "interface":
            manual.print_header()
            manual.print_interface_overview()
        elif section == "training":
            manual.print_header()
            manual.print_training_configuration()
        elif section == "prediction":
            manual.print_header()
            manual.print_prediction_configuration()
        elif section == "plots":
            manual.print_header()
            manual.print_plot_controls()
        elif section == "troubleshooting":
            manual.print_header()
            manual.print_troubleshooting()
        elif section == "examples":
            manual.print_header()
            manual.print_usage_examples()
        else:
            print(f"Unknown section: {section}")
            print("Available sections: overview, installation, interface, training, prediction, plots, troubleshooting, examples")
            print("Use 'full' for complete manual")
    else:
        manual.print_full_manual()

if __name__ == "__main__":
    main() 